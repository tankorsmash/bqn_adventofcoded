data ← •file.Lines "../../samples/2020/day7.txt"
# data ↩ •file.Lines "../../inputs/2020/day7.txt"

SplitBy ← (+`∘=⊔⊢)

# from bqncrate
FindInString ← {∊⟜𝕩⌾<𝕨}

# remove substring from string
StripSubstring ← {
	full_find ← 𝕨(≢∘⊢↑⍷)𝕩
	sub_range ← ↕≠𝕨
	full_range ← ↕≠𝕩

	# characters not in the substring
	mask ← full_range ¬∘∊⥊ (sub_range⊸+)˘ full_find/full_range
	mask/𝕩
}

# find which character is a digit character
IsNonNumericChar ← {
	nums ← '0'+↕10
	res ← >¬⌈˝ nums= 𝕩
}
# •Show IsNonNumericChar <"99i 2 am 55 years old"

MarkAllowed ← {
	full_find ← 𝕨(≢∘⊢↑⍷)𝕩
	sub_range ← ↕≠𝕨
	full_range ← ↕≠𝕩

	# characters not in the substring
	mask ← full_range ¬∘∊⥊ (sub_range⊸+)˘ full_find/full_range
}


ParseAllNumbers ← {
	# 1s where a digit is found
	mask ← (¬IsNonNumericChar < 𝕩)
	# start index and end index of each number within the string
	bounds ← ∘‿2⥊/0 (∾≠∾˜) mask
	# the start index plus its offset
	join ← (⊏∾-˜´)˘bounds
	# each index in the string a digit is at
	idxs ← (<↕∘(1⊸⊑)+˘⊑)˘join
	# pull out each char at each index, and parse the whole number
	parsed ←(•ParseFloat ⊏⟜𝕩 )¨idxs
	parsed
}

ParseBagNew ← {
	# mostly from bqnrate, splits on mask 𝕨
	Split ← ((0⊸≠∘≠¨)/⊢)((⊢-˜+`×¬)⊸⊔)

	# run many precleaners on the input
	preclean ← 𝕩 StripSubstring´ ⟨".", " bag", " bags"⟩

	mask ← ¬" contain " MarkAllowed preclean
	container‿raw_children← (mask) Split preclean

	comma_mask ← ¬ "," MarkAllowed raw_children
	# •Show comma_mask

	DropLeadingSpace ← ((' '=⊏)↓⊢)
	JoinFunc ← ParseAllNumbers∾(<∘DropLeadingSpace IsNonNumericChar∘</⊢)
	children ← (JoinFunc DropLeadingSpace)¨ comma_mask Split raw_children
	container‿children
}


# which bags can eventually contain a shiny gold bag?
BreakIntoParentChildPairs ← {
	bags ← ParseBagNew¨ 𝕩

	ConcatChildren ← {
		container‿children ← 𝕩
		((<container)⊸∾∘<)¨ children

	}
	parent_child_pairs ← ∾⥊˘ (>ConcatChildren)¨ bags
	parent_child_pairs
}

Sep ← {
	num ← 10
	•Show  ∾´ ⥊ ∾´ ((num/"-")‿(𝕩)‿(num/"-"))
}

PartOne ← {
	parent_child_pairs ← BreakIntoParentChildPairs 𝕩
	•Show parent_child_pairs

	FindBags ← {
		Sep 𝕩

		target ← 𝕩
		bags_containing_target_mask ← (target⊸∊1⊸⊑)˘ parent_child_pairs
		bags_containing_target_mask

		containing_target ← ⊏˘ bags_containing_target_mask/parent_child_pairs
		•Show "containing_target"‿containing_target

		Sep "done"
		•Show " "
		containing_target
	}
	new_bags ← FindBags˘ <"shiny gold"
	•Show new_bags
	new_bags ↩ ⍷ ⥊ FindBags˘ new_bags
	•Show new_bags
	new_bags ↩ ⍷ ⥊ FindBags˘ new_bags
	•Show new_bags

	parent_child_pairs
}

PartOne data

ContainsBag ← {
	•Show (<"shiny gold")⊸∊ (•Show 𝕩)
}
# ContainsBag ⟨"shiny"⟩
# ContainsBag ⟨1, "bright white"⟩
# ContainsBag ⟨2, "muted yellow"⟩
# ContainsBag ⟨1, "shiny gold"⟩

# •Show ParseBagNew ⊑ data



# ParseAllNumbers "29 men 1 can, 0 parents"

